I"¯ô<p>M·ªôt trong nh·ªØng design pattern m√† quy·ªÉn s√°ch n√†o c≈©ng ƒë·ªÅ c·∫≠p, ƒë√≥ ch√≠nh l√† Factory Pattern, ƒëi·ªÅu ƒë√≥ ƒë√£ ch·ª©ng minh s·ª± ph·ªï bi·∫øn c·ªßa n√≥. N·∫øu b·∫°n c√≤n nh·ªõ, ·ªü b√†i vi·∫øt tr∆∞·ªõc, t√¥i c√≥ chia nh√≥m c√°c lo·∫°i design pattern kh√°c nhau, bao g·ªìm Creational, Structural v√† Behavioral. Factory Pattern thu·ªôc lo·∫°i Creational, do ƒë√≥, v·∫•n ƒë·ªÅ v√† n√≥ gi·∫£i quy·∫øt s·∫Ω xoay quanh c√¢u chuy·ªán kh·ªüi t·∫°o object, instantiation,‚Ä¶ v√¢n v√¢n v√† m√¢y m√¢y. B√†i vi·∫øt n√†y t∆∞∆°ng ƒë·ªëi d√†i v√† nhi·ªÅu ch·ªØ, th·∫ø n√™n h√£y c·ªë g·∫Øng ki√™n nh·∫´n ƒë·ªçc ƒë·∫øn cu·ªëi nh√©, v√¨ theo t√¥i, ƒë√¢y l√† m·ªôt pattern ƒë∆°n gi·∫£n, nh∆∞ng l·∫°i h·ªón lo·∫°n v·ªÅ th√¥ng tin b·∫≠c nh·∫•t.</p>

<p>B√†i vi·∫øt n√†y n√≥i v·ªÅ g√¨?</p>

<p style="padding-left: 60px;">
  I. V√†i ƒëi·ªÅu v·ªÅ Factory: Cung c·∫•p kh√°i ni·ªám c∆° b·∫£n v·ªÅ Factory, ƒë·∫∑c ƒëi·ªÉm, t√°c d·ª•ng,&#8230;
</p>

<p style="padding-left: 60px;">
  II. Simple Factory: c√°ch th·ª©c ƒë∆°n gi·∫£n nh·∫•t ƒë·ªÉ √°p d·ª•ng Factory.
</p>

<p style="padding-left: 60px;">
  III. Factory Method: design pattern ch√≠nh th·ª©c, c√°ch th·ª±c hi·ªán n√≥, ∆∞u ƒëi·ªÉm c·ªßa n√≥,&#8230;
</p>

<p style="padding-left: 60px;">
  IV. Nh·∫≠n x√©t v√† k·∫øt lu·∫≠n: t·ªïng k·∫øt l·∫°i b√†i vi·∫øt + nh·∫≠n x√©t theo quan ƒëi·ªÉm c·ªßa t√°c gi·∫£.
</p>

<p>¬†</p>

<h2 id="i-v√†i-ƒëi·ªÅu-v·ªÅ-factory"><span style="color: #00ccff;">I. V√†i ƒëi·ªÅu v·ªÅ Factory</span></h2>

<p>Factory l√† object, function ho·∫∑c method c√≥ nhi·ªám v·ª• kh·ªüi t·∫°o n√™n c√°c object kh√°c, c√≥ nghƒ©a l√†, return c·ªßa n√≥ s·∫Ω l√† 1 instance c·ªßa 1 object kh√°c.</p>

<p><em><span style="color: #ff0000;"># T·∫°i sao ch√∫ng ta l·∫°i c·∫ßn ph·∫£i c√≥ factory ?</span></em></p>

<p>ƒêi t√¨m c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi tr√™n c≈©ng ch√≠nh l√† vi·ªác ƒëi t√¨m √Ω nghƒ©a: t·∫°i sao ch√∫ng ta l·∫°i c·∫ßn ph·∫£i s·ª≠ d·ª•ng m·ªôt Object,function,‚Ä¶ ƒë·ªÉ kh·ªüi t·∫°o n√™n instance kh√°c?</p>

<h4 id="gi·∫£m-t√≠nh-k·∫øt-d√≠nh">Gi·∫£m t√≠nh k·∫øt d√≠nh</h4>

<p>Gi·∫£ s·ª≠ b·∫°n ƒëang ph·∫£i vi·∫øt t√≠nh nƒÉng ghi log cho database, theo c√°ch th√¥ng th∆∞·ªùng v√† ƒë∆°n gi·∫£n nh·∫•t, b·∫°n s·∫Ω vi·∫øt nh∆∞ sau:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">public</span> <span class="kd">struct</span> <span class="kt">DatabaseLogger</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">writeLog</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// TODO: write log
</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">CreateUserViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">writeUserLog</span><span class="p">(</span><span class="nv">log</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">logger</span> <span class="o">=</span> <span class="kt">DatabaseLogger</span><span class="p">()</span>
        <span class="n">logger</span><span class="o">.</span><span class="nf">writeLog</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="n">log</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Nh∆∞ng ƒëi·ªÅu g√¨ s·∫Ω x·∫£y ra, n·∫øu nh∆∞ team b·∫°n nh·∫≠n th·∫•y log database kh√¥ng th·ª±c s·ª± c·∫ßn thi·∫øt, v√† mu·ªën chuy·ªÉn sang ghi log ph·∫ßn Networking?</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">public</span> <span class="kd">struct</span> <span class="kt">DatabaseLogger</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">writeLog</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// TODO: write log
</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">public</span> <span class="kd">struct</span> <span class="kt">NetworkingLogger</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">writeLog</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// TODO: write Networking Log
</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">CreateUserViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">writeUserLog</span><span class="p">(</span><span class="nv">log</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
<span class="c1">//        let logger = DatabaseLogger()
</span>
        <span class="k">let</span> <span class="nv">logger</span> <span class="o">=</span> <span class="kt">NetworkingLogger</span><span class="p">()</span>
        <span class="n">logger</span><span class="o">.</span><span class="nf">writeLog</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="n">log</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>B·∫°n ph·∫£i thay th·∫ø ho·∫∑c ch·ªânh s·ª≠a nh·ªØng ph·∫ßn li√™n quan ƒë·∫øn DatabaseLogger c≈©, v√† v√¨ Logger l√† function ƒë∆∞·ª£c s·ª≠ d·ª•ng ph·ªï bi·∫øn trong ·ª©ng d·ª•ng, do ƒë√≥ b·∫°n ph·∫£i s·ª≠a ƒë·ªïi ·ªü m·ªçi n∆°i li√™n quan, ƒëi·ªÅu n√†y kh√¥ng h·ªÅ d·ªÖ ch·ªãu g√¨ ph·∫£i kh√¥ng?</p>

<p>V·ªõi Factory, m·ªçi vi·ªác tr·ªü n√™n ƒë∆°n gi·∫£n h∆°n:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">public</span> <span class="kd">protocol</span> <span class="kt">ILogger</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">writeLog</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">public</span> <span class="kd">struct</span> <span class="kt">LoggerFactory</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">createLogger</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">ILogger</span> <span class="p">{</span>
<span class="c1">//        return DatabaseLogger()
</span>
        <span class="k">return</span> <span class="kt">NetworkingLogger</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">public</span> <span class="kd">struct</span> <span class="kt">DatabaseLogger</span><span class="p">:</span> <span class="kt">ILogger</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">writeLog</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// TODO: write log
</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">public</span> <span class="kd">struct</span> <span class="kt">NetworkingLogger</span><span class="p">:</span> <span class="kt">ILogger</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">func</span> <span class="nf">writeLog</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// TODO: write Networking Log
</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">CreateUserViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">writeUserLog</span><span class="p">(</span><span class="nv">log</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">logger</span> <span class="o">=</span> <span class="kt">LoggerFactory</span><span class="o">.</span><span class="nf">createLogger</span><span class="p">()</span>
        <span class="n">logger</span><span class="o">.</span><span class="nf">writeLog</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="s">"Log something"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Vi·ªác kh·ªüi t·∫°o ra Logger ƒë·ªÉ s·ª≠ d·ª•ng ho√†n to√†n n·∫±m ·ªü FactoryLogger, do ƒë√≥, n·∫øu c·∫ßn s·ª≠a, ch√∫ng ta ch·ªâ c·∫ßn s·ª≠a ·ªü m√¨nh n√≥ m√† th√¥i, tr√°nh ƒë∆∞·ª£c ho√†n to√†n t√¨nh hu·ªëng ph·∫£i s·ª≠a ·ªü nhi·ªÅu ch·ªó k·ªÉ tr√™n.</p>

<h4 id="che-gi·∫•u-vi·ªác-kh·ªüi-t·∫°o-ph·ª©c-t·∫°p">Che gi·∫•u vi·ªác kh·ªüi t·∫°o ph·ª©c t·∫°p</h4>

<p>B·∫£n ch·∫•t c·ªßa Factory l√† return l·∫°i 1 instance, v√¨ v·∫≠y, c√°i ph·ª©c t·∫°p c·∫ßn che gi·∫•u ƒë∆∞·ª£c n√≥i ƒë·∫øn ·ªü ƒë√¢y ch√≠nh l√† che gi·∫•u ƒëi c√°i vi·ªác kh·ªüi t·∫°o ra instance ƒë√≥. V·∫≠y t·∫°i sao l·∫°i ph·∫£i che gi·∫•u ? H√£y x√©t v√≠ d·ª• sau:</p>

<p>Gi·∫£ s·ª≠ t√¥i ƒëang thi·∫øt k·∫ø ·ª©ng d·ª•ng h·∫πn h√≤ t∆∞∆°ng t·ª± nh∆∞ Tinder, t√¥i mu·ªën x√¢y d·ª±ng module ƒë∆∞a ra g·ª£i √Ω k·∫øt b·∫°n cho User, vi·ªác ƒë∆∞a ra g·ª£i √Ω ƒë∆∞·ª£c t√πy ch·ªçn d·ª±a tr√™n danh s√°ch c√°c ti√™u ti√™u ch√≠.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">SuggesstMatching</span> <span class="p">{</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">user</span><span class="p">:</span> <span class="kt">User</span><span class="p">,</span> <span class="nv">list</span><span class="p">:</span> <span class="kt">PropertyList</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">suggesst</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">User</span><span class="p">]</span> <span class="p">{</span>
        <span class="c1">// To Do: find and suggest user
</span>
        <span class="k">return</span> <span class="p">[]</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">HomeViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">suggestFriend</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">user</span> <span class="o">=</span> <span class="kt">User</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">propertyList</span> <span class="o">=</span> <span class="kt">PropertyList</span><span class="p">()</span>

        <span class="k">let</span> <span class="nv">suggestMatching</span> <span class="o">=</span> <span class="kt">SuggesstMatching</span><span class="p">(</span><span class="nv">user</span><span class="p">:</span> <span class="n">user</span><span class="p">,</span> <span class="nv">list</span><span class="p">:</span> <span class="n">propertyList</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">suggestingUser</span> <span class="o">=</span> <span class="n">suggestMatching</span><span class="o">.</span><span class="nf">suggesst</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">FavoriteViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">func</span> <span class="nf">findFriend</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">user</span> <span class="o">=</span> <span class="kt">User</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">propertyList</span> <span class="o">=</span> <span class="kt">PropertyList</span><span class="p">()</span>
        
        <span class="k">let</span> <span class="nv">suggestMatching</span> <span class="o">=</span> <span class="kt">SuggesstMatching</span><span class="p">(</span><span class="nv">user</span><span class="p">:</span> <span class="n">user</span><span class="p">,</span> <span class="nv">list</span><span class="p">:</span> <span class="n">propertyList</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">suggestingUser</span> <span class="o">=</span> <span class="n">suggestMatching</span><span class="o">.</span><span class="nf">suggesst</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>SuggestMatching l√† module ƒë·∫£m nh·∫≠n business logic, User ƒë·∫°i di·ªán cho ng∆∞·ªùi d√πng, PropertyList ƒë·∫°i di·ªán cho danh s√°ch ti√™u ch√≠. Module n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ·ªü Favorite &amp; HomeViewController ƒë·ªÉ t√¨m ra danh s√°ch g·ª£i √Ω k·∫øt b·∫°n. V·∫≠y c√≥ v·∫•n ƒë·ªÅ g√¨ v·ªõi nh·ªØng d√≤ng code n√†y ?</p>

<ul>
  <li>Vi·ªác kh·ªüi t·∫°o SuggestMatching module b·ªã l·∫∑p l·∫°i.</li>
  <li>R·∫•t c√≥ th·ªÉ PropertyList sau n√†y c·∫≠p nh·∫≠t v√† thay ƒë·ªïi, do ƒë√≥ c√≥ nguy c∆° kh√° cao c√≥ th·ªÉ ph·∫£i s·ª≠a l·∫°i code.</li>
  <li>·ªû g√≥c nh√¨n c·ªßa Home &amp; FavoriteViewController, ch√∫ng ho√†n to√†n kh√¥ng quan t√¢m ƒë·∫øn vi·ªác kh·ªüi t·∫°o SuggestMatching.</li>
</ul>

<p>‚Äì&gt; R√µ r√†ng SuggestMatching ƒë∆∞·ª£c kh·ªüi t·∫°o ph·ª©c t·∫°p, h∆°n n·ªØa 2 ViewController l·∫°i kh√¥ng c·∫ßn quan t√¢m ƒë·∫øn c√°i ph·ª©c t·∫°p ƒë√≥. N·∫øu s·ª≠ d·ª•ng Factory, b√†i to√°n tr√™n s·∫Ω c√≥ d·∫°ng nh∆∞ sau:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">SuggesstMatchingFactory</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">getSuggestMatching</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">SuggesstMatching</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">user</span> <span class="o">=</span> <span class="kt">User</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">propertyList</span> <span class="o">=</span> <span class="kt">PropertyList</span><span class="p">()</span>
        
        <span class="k">return</span> <span class="kt">SuggesstMatching</span><span class="p">(</span><span class="nv">user</span><span class="p">:</span> <span class="n">user</span><span class="p">,</span> <span class="nv">list</span><span class="p">:</span> <span class="n">propertyList</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">HomeViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">suggestFriend</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">suggestMatching</span> <span class="o">=</span> <span class="kt">SuggesstMatchingFactory</span><span class="o">.</span><span class="nf">getSuggestMatching</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">suggestingUser</span> <span class="o">=</span> <span class="n">suggestMatching</span><span class="o">.</span><span class="nf">suggesst</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Vi·ªác l√†m th·∫ø n√†o ƒë·ªÉ l·∫•y ra SuggestMatching s·∫Ω do Factory ƒë·∫£m nhi·ªám, t∆∞∆°ng ƒë∆∞∆°ng v·ªõi vi·ªác s·ª≠a ƒë·ªïi c≈©ng ch·ªâ n·∫±m g·ªçn trong c√°i Factory ƒë√≥, c√°c class / module kh√°c c·∫ßn th√¨ ch·ªâ vi·ªác g·ªçi ra ƒë·ªÉ d√πng, ƒë∆°n gi·∫£n, thu·∫≠n ti·ªán v√† d·ªÖ qu·∫£n l√Ω h∆°n.</p>

<p>M·ªôt v·∫•n ƒë·ªÅ kh√°c m√† Factory c√≥ th·ªÉ gi·∫£i quy·∫øt ƒë∆∞·ª£c:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">SuggesstMatching</span> <span class="p">{</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">user</span><span class="p">:</span> <span class="kt">User</span><span class="p">,</span> <span class="nv">list</span><span class="p">:</span> <span class="kt">PropertyList</span><span class="p">)</span> <span class="p">{}</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">user1</span><span class="p">:</span> <span class="kt">User</span><span class="p">,</span> <span class="nv">user2</span><span class="p">:</span> <span class="kt">User</span><span class="p">)</span> <span class="p">{}</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">user</span><span class="p">:</span> <span class="kt">User</span><span class="p">,</span> <span class="nv">place</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{}</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">user</span><span class="p">:</span> <span class="p">[</span><span class="kt">User</span><span class="p">])</span> <span class="p">{}</span>
    
    <span class="kd">func</span> <span class="nf">suggesst</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">User</span><span class="p">]</span> <span class="p">{</span>
        <span class="c1">// To Do: find and suggest user
</span>
        <span class="k">return</span> <span class="p">[]</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Gi·∫£ s·ª≠ SuggestMatching c√≥ r·∫•t nhi·ªÅu ki·ªÉu ƒë·ªÉ instantiate, vi·ªác vi·∫øt g·ªçn v√†o Factory ch·∫Øc ch·∫Øn l√† m·ªôt gi·∫£i ph√°p t·ªët. Ch∆∞a k·ªÉ ƒë·∫øn nh·ªØng tr∆∞·ªùng h·ª£p c·∫ßn k·∫øt h·ª£p nhi·ªÅu dependency ƒë·ªÉ t·∫°o ra 1 instance, c√°c dependency ƒë√≥ l·∫°i c√≥ th√™m nhi·ªÅu ki·ªÉu ƒë·ªÉ kh·ªüi t·∫°o ‚Äì&gt; ƒë·ªô ph·ª©c t·∫°p s·∫Ω tƒÉng theo h√†m m≈©, v√† Factory s·∫Ω gi√∫p b·∫°n √≠t ƒëau ƒë·ªõn h∆°n khi ph·∫£i s·ª≠a ƒë·ªïi ch√∫ng.</p>

<h2 id="ii-b√†i-to√°n-th·ª±c-t·∫ø"><span style="color: #00ccff;"><strong>II. B√†i to√°n th·ª±c t·∫ø:</strong></span></h2>

<p>T√¥i ƒëang ph√°t tri·ªÉn t√≠nh nƒÉng c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng, trong ƒë√≥ c√≥ ph·∫ßn c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ (qu·∫≠n, huy·ªán, t·ªânh th√†nh) n∆°i h·ªç sinh s·ªëng. T√¥i s·∫Ω c√≥ 2 c√°ch ch√≠nh ƒë·ªÉ l·∫•y th√¥ng tin t·ªânh th√†nh s·∫µn c√≥: l·∫•y t·ª´ File, l·∫•y t·ª´ Database.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">Place</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
    
    <span class="kd">public</span> <span class="nf">init</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">id</span>
        <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">FilePlaceConnector</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">getPlaceList</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Place</span><span class="p">]</span> <span class="p">{</span>
        <span class="c1">// load File System
</span>
        <span class="c1">// get Place list from Files
</span>
        <span class="k">return</span> <span class="n">placeListFromFile</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">DatabaseConnector</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">loadPlaceListFromDatabase</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Place</span><span class="p">]</span> <span class="p">{</span>
        <span class="c1">// setup DB connection
</span>
        <span class="c1">// query to get Place list
</span>
        
        <span class="k">return</span> <span class="n">placeDatabaesList</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Th·∫ø nh∆∞ng, H√† T√¢y s√°t nh·∫≠p v√†o H√† N·ªôi, r·ªìi Vi·ªát Nam th·ªëng nh·∫•t Ho√†ng Sa, Tr∆∞·ªùng Sa, d·∫´n ƒë·∫øn team c·ªßa t√¥i quy·∫øt ƒë·ªãnh th√™m ph·∫ßn l·∫•y th√¥ng tin ƒë·ªãa ch·ªâ t·ª´ API ƒë·ªÉ s·ª≠a ƒë·ªïi real-time d·ªÖ d√†ng h∆°n. Theo nh∆∞ nh·ªØng ph√¢n t√≠ch ·ªü tr√™n, s·ª≠ d·ª•ng Factory ·ªü tr∆∞·ªùng h·ª£p n√†y l√† c·∫ßn thi·∫øt v√† h·ª£p l√Ω. Tuy nhi√™n, s·ª≠ d·ª•ng nh∆∞ th·∫ø n√†o ?</p>

<h2 id="iii-simple-factory"><span style="color: #00ccff;"><strong>III. Simple Factory</strong></span></h2>

<p>C√°ch ƒë·∫ßu ti√™n l√† s·ª≠ d·ª•ng m·ªôt th·ªß thu·∫≠t g·ªçi l√† Simple Factory, c·ª• th·ªÉ:</p>

<p><img class="size-full wp-image-1830 aligncenter" src="/wp-content/uploads/2018/11/Untitled-Diagram-2.png" alt="" width="974" height="296" srcset="/wp-content/uploads/2018/11/Untitled-Diagram-2.png 974w, /wp-content/uploads/2018/11/Untitled-Diagram-2-300x91.png 300w, /wp-content/uploads/2018/11/Untitled-Diagram-2-768x233.png 768w" sizes="(max-width: 974px) 100vw, 974px" /></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">enum</span> <span class="kt">ConnectionType</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">file</span>
    <span class="k">case</span> <span class="n">api</span>
    <span class="k">case</span> <span class="n">database</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">PlaceConnectorProtocol</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">loadPlaceList</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Place</span><span class="p">]</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">FilePlaceConnector</span><span class="p">:</span> <span class="kt">PlaceConnectorProtocol</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">loadPlaceList</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Place</span><span class="p">]</span> <span class="p">{</span>
        <span class="c1">// load File System
</span>
        <span class="c1">// get Place list from Files
</span>
        <span class="k">return</span> <span class="n">placeListFromFile</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">struct</span> <span class="kt">APIPlaceConnector</span><span class="p">:</span> <span class="kt">PlaceConnectorProtocol</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">loadPlaceList</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Place</span><span class="p">]</span> <span class="p">{</span>
        <span class="c1">// setup connection
</span>
        <span class="c1">// get Place list from API
</span>
        
        <span class="k">return</span> <span class="n">placeListFromAPI</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">DatabaseConnector</span><span class="p">:</span> <span class="kt">PlaceConnectorProtocol</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">loadPlaceList</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Place</span><span class="p">]</span> <span class="p">{</span>
        <span class="c1">// setup DB connection
</span>
        <span class="c1">// query to get Place list
</span>
        
        <span class="k">return</span> <span class="n">placeDatabaesList</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">PlaceConnectorFactory</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">getPlaceConnector</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="kt">ConnectionType</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">PlaceConnectorProtocol</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="n">type</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">file</span><span class="p">:</span>
            <span class="k">return</span> <span class="kt">FilePlaceConnector</span><span class="p">()</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">api</span><span class="p">:</span>
            <span class="k">return</span> <span class="kt">APIPlaceConnector</span><span class="p">()</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">database</span><span class="p">:</span>
            <span class="k">return</span> <span class="kt">DatabaseConnector</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">ClientController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">fetchPlace</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">placeService</span><span class="p">:</span> <span class="kt">PlaceConnectorProtocol</span> <span class="o">=</span> <span class="kt">PlaceConnectorFactory</span><span class="o">.</span><span class="nf">getPlaceConnector</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">file</span><span class="p">)</span>
        <span class="n">placeService</span><span class="o">.</span><span class="nf">loadPlaceList</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>V√¨ n√≥ l√† ‚ÄúSimple Factory‚Äù, n√™n ∆∞u ƒëi·ªÉm c·ªßa n√≥ ch√≠nh l√† t·∫≠n d·ª•ng ∆∞u ƒëi·ªÉm c·ªßa Factory ƒë√£ tr√¨nh b√†y ·ªü tr√™n, t·∫≠n d·ª•ng t·ªët ƒë·∫∑c ƒëi·ªÉm ƒëa h√¨nh trong OOP. Tuy nhi√™n c≈©ng c·∫ßn l∆∞u √Ω:</p>

<ul>
  <li>Simple Factory kh√° h·ªØu d·ª•ng v·ªõi c√°c b√†i to√°n li√™n quan ƒë·∫øn t√≠nh ƒëa h√¨nh (v·ªõi s·ªë l∆∞·ª£ng object chung nhi·ªÅu).</li>
  <li>Simple Factory <span style="color: #ff0000;"><strong>KH√îNG</strong></span> ƒë∆∞·ª£c coi l√† Design Pattern.</li>
</ul>

<p>Simple Factory kh√¥ng h·ªÅ ph·ª©c t·∫°p, ch·ªâ l√† v·∫≠n d·ª•ng linh ho·∫°t t√≠nh ƒëa h√¨nh ƒë·ªÉ kh·ªüi t·∫°o n√™n c√°c class con, r√µ r√†ng, ch·ªâ l√† ch√∫t ki·∫øn th·ª©c cƒÉn b·∫£n v·ªÅ OOP m√† th√¥i. V√¨ v·∫≠y t√¥i khuy√™n b·∫°n, n·∫øu c√≤n ch∆∞a r√µ v·ªÅ OOP, th√¨ h√£y t√¨m hi·ªÉu l·∫°i ngay ƒëi.</p>

<h2 id="iv-factory-method"><span style="color: #00ccff;"><strong>IV. Factory method:</strong></span></h2>

<p>T·ª´ Simple Factory, ta c√≥ th·ªÉ ph√°t tri·ªÉn th√†nh ph∆∞∆°ng ph√°p Factory Method, v√† ph∆∞∆°ng ph√°p n√†y ƒë∆∞·ª£c coi l√† m·ªôt Design Pattern. V·∫≠y Factory Method l√† nh∆∞ th·∫ø n√†o? Xin m·ªùi ƒë·ªçc ti·∫øp.</p>

<p>Factory Method Pattern ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p ƒë·∫øn trong quy·ªÉn s√°ch n·ªïi ti·∫øng c·ªßa Gang-Of-Four (ƒë·ªÅ c·∫≠p ·ªü b√†i vi·∫øt tr∆∞·ªõc), ƒë·ªãnh nghƒ©a c·ªßa n√≥ nh∆∞ sau:</p>

<div class="page" title="Page 127">
  <div class="layoutArea">
    <div class="column">
      <blockquote>
        <p>
          Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.
        </p>
        
        <p>
          (T·∫°m d·ªãch: ƒë·ªãnh nghƒ©a m·ªôt Interface c√≥ nhi·ªám v·ª• kh·ªüi t·∫°o object, nh∆∞ng ƒë·ªÉ c√°c subclasses-class con quy·∫øt ƒë·ªãnh lo·∫°i class n√†o s·∫Ω ƒë∆∞·ª£c t·∫°o instance. Factory Method gi√∫p cho 1 class tr√¨ ho√£n ph·∫ßn kh·ªüi t·∫°o c·ªßa m√¨nh cho c√°c subclass.)
        </p>
      </blockquote>
      
      <p>
        T√¥i s·∫Ω di·ªÖn gi·∫£i ƒë·ªãnh nghƒ©a tr√™n b·∫±ng code:
      </p>
      
      <p>
        <img class="size-large wp-image-1832 aligncenter" src="/wp-content/uploads/2018/11/Untitled-Diagram-3-1024x542.png" alt="" width="768" height="407" srcset="/wp-content/uploads/2018/11/Untitled-Diagram-3-1024x542.png 1024w, /wp-content/uploads/2018/11/Untitled-Diagram-3-300x159.png 300w, /wp-content/uploads/2018/11/Untitled-Diagram-3-768x407.png 768w, /wp-content/uploads/2018/11/Untitled-Diagram-3.png 1046w" sizes="(max-width: 768px) 100vw, 768px" />
      </p>
      
      <p>
        <em>// V√¨ Swift kh√¥ng h·ªó tr·ª£ Abstract Class nh∆∞ c√°c ng√¥n ng·ªØ kh√°c, n√™n t√¥i s·∫Ω d√πng Protocol Extension ƒë·ªÉ thay th·∫ø.</em>
      </p>
      
      
<figure class="highlight"><pre><code class="language-swift" data-lang="swift">      <span class="kd">protocol</span> <span class="kt">PlaceConnectorFactory</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">getPlaceConnector</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">PlaceConnectorProtocol</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">PlaceConnectorFactory</span> <span class="p">{</span>
<span class="kd">func</span> <span class="nf">loadPlaceList</span><span class="p">()</span> <span class="p">{</span>
<span class="k">let</span> <span class="nv">placeConnector</span> <span class="o">=</span> <span class="nf">getPlaceConnector</span><span class="p">()</span>
<span class="n">placeConnector</span><span class="o">.</span><span class="nf">loadPlaceList</span><span class="p">()</span>
<span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">DatabaseConnectorFactory</span><span class="p">:</span> <span class="kt">PlaceConnectorFactory</span> <span class="p">{</span>
<span class="kd">func</span> <span class="nf">getPlaceConnector</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">PlaceConnectorProtocol</span> <span class="p">{</span>
<span class="c1">// Setup Database Environment
</span>
<span class="c1">// Connect Database and return instance
</span>
<span class="kt">DatabaseConnector</span><span class="p">()</span>
<span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">APIConnectorFactory</span><span class="p">:</span> <span class="kt">PlaceConnectorFactory</span> <span class="p">{</span>
<span class="kd">func</span> <span class="nf">getPlaceConnector</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">PlaceConnectorProtocol</span> <span class="p">{</span>
<span class="c1">// Setup Request
</span>
<span class="c1">// Request
</span>
<span class="c1">// Response
</span>
<span class="kt">APIPlaceConnector</span><span class="p">()</span>
<span class="p">}</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">placeConnector</span><span class="p">:</span> <span class="kt">PlaceConnectorFactory</span><span class="o">!</span>

<span class="c1">//placeConnector = DatabaseConnectorFactory()
</span>
<span class="n">placeConnector</span> <span class="o">=</span> <span class="kt">APIConnectorFactory</span><span class="p">()</span>

<span class="n">placeConnector</span><span class="o">.</span><span class="nf">loadPlaceList</span><span class="p">()</span></code></pre></figure>

  
 <p>
D·ªÖ d√†ng th·∫•y Factory hi·ªán t·∫°i ƒë√£ ƒë∆∞·ª£c chia th√†nh c√°c sub-factory con (DatabaseConnectorFactory, APIConnectorFactory), v√† vi·ªác instantiate n√≥ s·∫Ω t√πy thu·ªôc v√†o t·ª´ng ho√†n c·∫£nh ƒë·ªÉ s·ª≠ d·ª•ng. C√≥ nh·∫≠n x√©t g√¨ v·ªÅ c√°ch th·ª±c hi·ªán tr√™n ?
</p>
  
 <ul>
<li>
Vi·ªác class n√†o ƒë∆∞·ª£c instantiate ph·ª• thu·ªôc v√†o sub-factory, do ƒë√≥ c√≥ th·ªÉ d·ªÖ d√†ng ho√°n ƒë·ªïi, ngay c·∫£ trong Runtime.
</li>
<li>
C√≥ th·ªÉ ƒëi·ªÅu khi·ªÉn vi·ªác kh·ªüi t·∫°o d·ªÖ d√†ng h∆°n, v√† vi·∫øt logic business c≈©ng d·ªÖ d√†ng h∆°n (so v·ªõi Simple Factory).
</li>
<li>
Do vi·ªác kh·ªüi t·∫°o n·∫±m ·ªü c√°c sub-factory, vi·ªác ch·ªânh s·ª≠a c≈©ng s·∫Ω ƒë∆°n gi·∫£n h∆°n, v√≠ d·ª•: th√™m dependency (v·∫•n ƒë·ªÅ n√†y r·∫•t hay x·∫£y ra).
</li>
<li>
C√≥ th·ªÉ m·ªü r·ªông c√°c Factory m·ªõi, d·ª±a tr√™n c√°c factory c≈©. ƒê·∫∑c ƒëi·ªÉm n√†y kh√° hay, nh·∫•t l√† khi b·∫°n mu·ªën vi·∫øt c√°c custom Factory, d·ª±a tr√™n c√°c Factory s·∫µn c√≥ c·ªßa th∆∞ vi·ªán, framework,&#8230;
</li>
</ul>
  
 <p>
V·∫≠y khi n√†o ch√∫ng ta n√™n s·ª≠ d·ª•ng Factory Method ?
</p>
  
 <ul>
<li>
Nh∆∞ ƒë·ªãnh nghƒ©a: khi b·∫°n mu·ªën c√°c sub-class quy·∫øt ƒë·ªãnh c√°i n√†o s·∫Ω ƒë∆∞·ª£c instantiate.
</li>
<li>
Khi b·∫°n c√≥ 1 nh√≥m c√°c class c√πng t√≠nh ƒëa h√¨nh (polymorphism) v√† ch√∫ng c√≥ nguy c∆° s·ª≠a ƒë·ªïi cao trong qu√° tr√¨nh develop v√† maintain.
</li>
<li>
Khi b·∫°n mu·ªën m·ªü r·ªông ho·∫∑c thi·∫øt k·∫ø 1 module ƒë·ªÉ s·ª≠ d·ª•ng chung.
</li>
</ul>
  
 <p>
T·ª´ Factory Method, ng∆∞·ªùi ta m·ªü r·ªông v√† ph√°t tri·ªÉn n√≥ h∆°n n·ªØa, th√†nh m·ªôt pattern kh√°c tr·ª´u t∆∞·ª£ng h∆°n, ƒë√≥ ch√≠nh l√† <em><strong><span style="color: #00ccff;">Abstract Factory</span></strong></em>. Tuy nhi√™n, pattern n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng cho c√°c b√†i to√°n ph·ª©c t·∫°p, v√† t√¥i tin r·∫±ng n·∫øu t√¥i ƒë·ªÅ c·∫≠p n√≥ ·ªü b√†i vi·∫øt n√†y, b·∫°n s·∫Ω t·∫©u h·ªèa nh·∫≠p ma ngay. M·∫∑c kh√°c,<span style="color: #00ccff;"><em><strong> Abstract Factory</strong></em></span> ho√†n to√†n c√≥ th·ªÉ suy lu·∫≠n v√† t√¨m hi·ªÉu th√¥ng qua g√≥c nh√¨n t·ª´ Factory Method, th·∫ø n√™n h√£y hi·ªÉu k·ªπ Factory Method tr∆∞·ªõc, vi·ªác c√≤n l·∫°i s·∫Ω ƒë∆°n gi·∫£n h∆°n nhi·ªÅu.
</p>
</div>

  </div>
</div>

<h2 id="v-nh·∫≠n-x√©t-v√†-k·∫øt-lu·∫≠n"><span style="color: #00ccff;"><strong>V. Nh·∫≠n x√©t v√† k·∫øt lu·∫≠n:</strong></span></h2>

<p>Qua b√†i vi·∫øt, t√¥i ƒë√£ tr√¨nh b√†y cho c√°c b·∫°n c∆° b·∫£n v·ªÅ Factory v√† c√°ch ch√∫ng ƒë∆∞·ª£c s·ª≠ d·ª•ng. Thu·∫≠t ng·ªØ v·ªÅ Factory Pattern b·∫°n c√≥ th·ªÉ t√¨m th·∫•y r·∫•t r·∫•t nhi·ªÅu tr√™n Internet, v√¨ ƒë∆°n gi·∫£n l√† n√≥ l√† pattern qu√° ph·ªï bi·∫øn v√† th√¥ng d·ª•ng. B·∫£n th√¢n Apple c≈©ng s·ª≠ d·ª•ng ch√∫ng trong framework UIKit, <a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/CocoaEncyclopedia/ClassFactoryMethods/ClassFactoryMethods.html">b·∫°n c√≥ th·ªÉ t√¨m th·∫•y ·ªü ƒë√¢y.</a>¬†Tuy nhi√™n, m·ªôt ph·∫ßn v√¨ s·ª± ƒëa d·∫°ng c·ªßa t√†i li·ªáu, nhi·ªÅu ng∆∞·ªùi s·∫Ω b·ªã b·ªëi r·ªëi v√† b·∫ø t·∫Øc khi t√¨m hi·ªÉu v·ªÅ ƒë·ªÅ t√†i n√†y. B·∫£n th√¢n t√¥i khi m·ªõi nghi√™n c·ª©u c≈©ng g·∫∑p v·∫•n ƒë·ªÅ t∆∞∆°ng t·ª±, sau ƒë√≥ t√¥i ƒë√£ t√¨m hi·ªÉu th√™m v√† t·ªïng k·∫øt l·∫°i ƒë∆∞·ª£c m·ªôt s·ªë ƒë·ªÅ m·ª•c n√™u ·ªü tr√™n. B·∫°n c·∫ßn ph·∫£i hi·ªÉu r√µ Factory, Simple Factory, v√† Factory Method, ch√∫ng l√† g√¨ v√† ch√∫ng ph√¢n bi·ªát nh∆∞ th·∫ø n√†o. M·ªôt s·ªë topic ƒë·ªÅ c·∫≠p ƒë·∫øn ch·ªß ƒë·ªÅ n√†y r·∫•t m·∫≠p m·ªù, th·∫≠m ch√≠ c√≤n ƒë√°nh ƒë·ªìng kh√°i ni·ªám v·ªõi nhau, b·∫°n h√£y c·∫©n th·∫≠n khi ti·∫øp thu th√¥ng tin t·ª´ nh·ªØng topic nh∆∞ v·∫≠y.</p>

<p>ƒê·ªÉ √Ω k·ªπ, c√≥ th·ªÉ th·∫•y Factory khi·∫øn c√°c module lo·∫±ng ngo·∫±ng v√† ph·ª©c t·∫°p h∆°n, v√¨ v·∫≠y, n√≥ c≈©ng c√≥ th·ªÉ coi l√† 1 <strong><span style="color: #ff0000;">Anti-pattern</span></strong> (pattern kh√¥ng n√™n d√πng), v√≠ d·ª• nh∆∞ trong c√°c tr∆∞·ªùng h·ª£p sau:</p>

<ul>
  <li>Khi ch·ªâ c√≥ m√¨nh b·∫°n v√† duy nh·∫•t b·∫°n code, ph√π h·ª£p v·ªõi c√°c d·ª± √°n nh·ªè, pet project,‚Ä¶</li>
  <li>Khi s·ªë l∆∞·ª£ng class chung ƒë·∫∑c ƒëi·ªÉm ƒëa h√¨nh √≠t, v√† c≈©ng √≠t c√≥ kh·∫£ nƒÉng thay ƒë·ªïi ·ªü t∆∞∆°ng lai, ho·∫∑c kh·∫£ nƒÉng thay ƒë·ªïi (·ªü vi·ªác kh·ªüi t·∫°o n√≥) t·ªën √≠t chi ph√≠.</li>
  <li>ƒê·ª´ng s·ª≠ d·ª•ng n√≥ ch·ªâ v√¨ n√≥ l√† 1 design pattern, m·ªôt developer t·ªët c·∫ßn ph·∫£i bi·∫øt c√¢n nh·∫Øc chi ph√≠ gi·ªØa vi·ªác th·ª±c thi pattern, so v·ªõi nh·ªØng g√¨ n√≥ mang l·∫°i, c√≥ th·∫≠t s·ª± l√† hi·ªáu qu·∫£ kh√¥ng.</li>
</ul>

<p>ƒê√†nh r·∫±ng n√≥ ph·ªï bi·∫øn, nh∆∞ng kh√¥ng c√≥ nghƒ©a n√≥ l√† t·ªët ·ªü m·ªçi tr∆∞·ªùng h·ª£p, h√£y ph√¢n t√≠ch v√† so s√°nh th·∫≠t c·∫©n th·∫≠n tr∆∞·ªõc khi ƒë∆∞a ra quy·∫øt ƒë·ªãnh. V·ªõi kinh nghi·ªám c·ªßa t√¥i, t√¥i c√≥ xu h∆∞·ªõng s·ª≠ d·ª•ng Simple Factory h∆°n l√† Factory Method, l√Ω do ch√≠nh l√† v√¨ n√≥ ƒë∆°n gi·∫£n v√† c√°c b√†i to√°n t√¥i g·∫∑p c≈©ng kh√¥ng qu√° ph·ª©c t·∫°p. Tuy nhi√™n, khi ph√°t tri·ªÉn m·ªôt s·ªë t√≠nh nƒÉng ph·ª©c t·∫°p ·ªü ph√≠a backend, th√¨ t√¥i l·∫°i th∆∞·ªùng s·ª≠ d·ª•ng Factory Method h∆°n, c≈©ng c√≥ l·∫ßn t√¥i maintain 1 source s·ª≠ d·ª•ng Abstract Factory, ph·∫£i c√¥ng nh·∫≠n l√† n√≥ lo·∫±ng ngo·∫±ng v√† t√¥i ƒë√°nh gi√° l√† kh√¥ng c·∫ßn thi·∫øt cho l·∫Øm, tuy nhi√™n, ƒë√≥ l√† ph·∫°m tr√π kh√°c v√† topic kh√°c.</p>

<p>P.s: n·∫øu c√≥ th·ªùi gian, h√£y t√¨m hi·ªÉu th√™m v·ªÅ Abstract Factory Design Pattern.</p>

<script id="dsq-count-scr" src="//https-vigorous-sinoussi-c377b6-netlify-com.disqus.com/count.js" async=""></script>

<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://https-vigorous-sinoussi-c377b6-netlify-com.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
:ET